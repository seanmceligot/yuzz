package org.yuzz.sql;
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
//import java.sql.NClob;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLXML;
//import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
//import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DebugPreparedStatement implements PreparedStatement {
    private static final Logger _classLog = Logger.getLogger(SqlHelper.class.getName());	private PreparedStatement _target = null;
	private String _sql = null;

	public DebugPreparedStatement(PreparedStatement target, String sql) {
		_target = target;
		//_sql = sql;
		//in order to handle sql statements containing colons in dates (that are not bind variables),
		//first change the colons in dates to semi-colons - they will be switched back before 
		//query execution:  see executeQuery(), executeUpdate(), execute
		//_sql = StringUtil.replace(sql,"HH24:","HH24;");
		//_sql = StringUtil.replace(_sql,"MI:SS","MI;SS");
	}
	private void setNext(String data) {
		// data is the string to which the bind variable will be set - for example, from pstmt.setString ( ++i, userId );, it would be user_id
		int questionMarkIndex = _sql.indexOf("?");
		int colonIndex = _sql.indexOf(":");
		if (data == null) {
			if((colonIndex != -1 && questionMarkIndex != -1 && questionMarkIndex < colonIndex) || (colonIndex == -1 && questionMarkIndex != -1)){
				_sql = StringUtil.replaceFirst(_sql, "?", "NULL");
			}
			else if((colonIndex != -1 && questionMarkIndex != -1 && colonIndex < questionMarkIndex) || (colonIndex != -1 && questionMarkIndex == -1)){
				_sql = StringUtil.replaceWholeWord(_sql, getBindVariableString(), "NULL");
			}
		} else {
			// replace any colon in the data with a semi-colon - switched back later
			data = StringUtil.replace(data,":",";");

			if((colonIndex != -1 && questionMarkIndex != -1 && questionMarkIndex < colonIndex) || (colonIndex == -1 && questionMarkIndex != -1)){
				_sql = StringUtil.replaceFirst(_sql, "?", "\'"+data+"\'");
			}
			else if((colonIndex != -1 && questionMarkIndex != -1 && colonIndex < questionMarkIndex) || (colonIndex != -1 && questionMarkIndex == -1)){
				_sql = StringUtil.replaceWholeWord(_sql, getBindVariableString(), "\'"+data+"\'");
			}
		}
	}

	private void setNextNumber(String number) {
		int questionMarkIndex = _sql.indexOf("?");
		int colonIndex = _sql.indexOf(":");
		// replace any colon in the data with a semi-colon - switched back later
		number = StringUtil.replace(number,":",";");
		if((colonIndex != -1 && questionMarkIndex != -1 && questionMarkIndex < colonIndex) || (colonIndex == -1 && questionMarkIndex != -1)){
			_sql = StringUtil.replaceFirst(_sql, "?", number);
		}
		else if((colonIndex != -1 && questionMarkIndex != -1 && colonIndex < questionMarkIndex) || (colonIndex != -1 && questionMarkIndex == -1)){
			_sql = StringUtil.replaceWholeWord(_sql, getBindVariableString(), number);
		}
	}

	private void setNextDate(java.util.Date date) {
		int questionMarkIndex = _sql.indexOf("?");
		int colonIndex = _sql.indexOf(":");

		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String datestr = new StringBuffer()
			.append("TO_DATE(")
			.append("\'")
			.append(format.format(date))
			.append("\', \'")
			//.append("YYYY-MM-DD HH24:MI:SS")
			.append("YYYY-MM-DD HH24;MI;SS")
			.append("\'")
			.append(")")
			.toString();
		// replace any colon in the data with a semi-colon - switched back later
		datestr = StringUtil.replace(datestr,":",";");

		if((colonIndex != -1 && questionMarkIndex != -1 && questionMarkIndex < colonIndex) || (colonIndex == -1 && questionMarkIndex != -1)){
			_sql = StringUtil.replaceFirst( _sql, "?", datestr);
		}
		else if((colonIndex != -1 && questionMarkIndex != -1 && colonIndex < questionMarkIndex) || (colonIndex != -1 && questionMarkIndex == -1) ){
			_sql = StringUtil.replaceWholeWord(_sql, getBindVariableString(), datestr);
		}
	}
	/**
	 * Executes the SQL query in this <code>PreparedStatement</code> object
	 * and returns the result set generated by the query.
	 *
	 * @return a ResultSet that contains the data produced by the
	 * query; never null
	 * @exception SQLException if a database access error occurs
	 */
	public ResultSet executeQuery() throws SQLException {
		_sql = StringUtil.replace(_sql,";",":");
		_classLog.log(Level.FINE,_sql);
		return _target.executeQuery();
	}
    /**
     * Executes the SQL INSERT, UPDATE or DELETE statement
	 * in this <code>PreparedStatement</code> object.
	 * In addition,
     * SQL statements that return nothing, such as SQL DDL statements,
     * can be executed.
     *
     * @return either the row count for INSERT, UPDATE or DELETE statements;
	 * or 0 for SQL statements that return nothing
     * @exception SQLException if a database access error occurs
     */
	public int executeUpdate() throws SQLException {
		_sql = StringUtil.replace(_sql,";",":");
		_classLog.log(Level.FINE,_sql);
		return _target.executeUpdate();
	}
	
    /**
     * Sets the designated parameter to SQL NULL.
     *
     * <P><B>Note:</B> You must specify the parameter's SQL type.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param sqlType the SQL type code defined in java.sql.Types
     * @exception SQLException if a database access error occurs
     */
	public void setNull(int index, int sqlType) throws SQLException {
		setNext("null");
		_target.setNull(index, sqlType);
	}

    /**
     * Sets the designated parameter to a Java boolean value.  The driver converts this
     * to an SQL BIT value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setBoolean(int index, boolean x) throws SQLException {
		setNextNumber(new Boolean(x).toString());
		_target.setBoolean(index, x);
	}

    /**
     * Sets the designated parameter to a Java byte value.  The driver converts this
     * to an SQL TINYINT value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setByte(int index, byte x) throws SQLException {
		setNextNumber(Byte.toString(x));
		_target.setByte(index, x);
	}

    /**
     * Sets the designated parameter to a Java short value.  The driver converts this
     * to an SQL SMALLINT value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setShort(int index, short x) throws SQLException {
		setNextNumber(Short.toString(x));
		_target.setShort(index, x);
	}

    /**
     * Sets the designated parameter to a Java int value.  The driver converts this
     * to an SQL INTEGER value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setInt(int index, int x) throws SQLException {
		setNextNumber(Integer.toString(x));
		_target.setInt(index, x);
	}

    /**
     * Sets the designated parameter to a Java long value.  The driver converts this
     * to an SQL BIGINT value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setLong(int index, long x) throws SQLException {
		setNextNumber(Long.toString(x));
		_target.setLong(index, x);
	}

    /**
     * Sets the designated parameter to a Java float value.  The driver converts this
     * to an SQL FLOAT value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setFloat(int index, float x) throws SQLException {
		setNextNumber(Float.toString(x));
		_target.setFloat(index, x);
	}

    /**
     * Sets the designated parameter to a Java double value.  The driver converts this
     * to an SQL DOUBLE value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setDouble(int index, double x) throws SQLException {
		setNextNumber(Double.toString(x));
		_target.setDouble(index, x);
	}

    /**
     * Sets the designated parameter to a java.lang.BigDecimal value.  
     * The driver converts this to an SQL NUMERIC value when
     * it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setBigDecimal(int index, BigDecimal x) throws SQLException {
		setNextNumber(x.toString( ));
		_target.setBigDecimal(index, x);
	}

    /**
     * Sets the designated parameter to a Java String value.  The driver converts this
     * to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's
     * size relative to the driver's limits on VARCHARs) when it sends
     * it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
	public void setString(int index, String x) throws SQLException {
		setNext(x);
		_target.setString(index, x);
	}

    /**
     * Sets the designated parameter to a Java array of bytes.  The driver converts
     * this to an SQL VARBINARY or LONGVARBINARY (depending on the
     * argument's size relative to the driver's limits on VARBINARYs)
     * when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value 
     * @exception SQLException if a database access error occurs
     */
	public void setBytes(int index, byte x[]) throws SQLException {
		setNext("bytes");
		_target.setBytes(index, x);
	}

    /**
     * Sets the designated parameter to a java.sql.Date value.  The driver converts this
     * to an SQL DATE value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
    public void setDate(int index, java.sql.Date x)
	    throws SQLException {
			setNextDate(x);
			_target.setDate(index, x);	
	}

    /**
     * Sets the designated parameter to a java.sql.Time value.  The driver converts this
     * to an SQL TIME value when it sends it to the database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
     * @exception SQLException if a database access error occurs
     */
    public void setTime(int index, java.sql.Time x) 
	    throws SQLException {
			setNextDate(x);
			_target.setTime(index, x);
		}

    /**
     * Sets the designated parameter to a java.sql.Timestamp value.  The driver
     * converts this to an SQL TIMESTAMP value when it sends it to the
     * database.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value 
     * @exception SQLException if a database access error occurs
     */
    public void setTimestamp(int index, java.sql.Timestamp x)
	    throws SQLException {
			setNextDate(x);
			_target.setTimestamp(index, x);
		}

    /**
	 * Sets the designated parameter to the given input stream, which will have 
	 * the specified number of bytes.
     * When a very large ASCII value is input to a LONGVARCHAR
     * parameter, it may be more practical to send it via a
     * java.io.InputStream. JDBC will read the data from the stream
     * as needed, until it reaches end-of-file.  The JDBC driver will
     * do any necessary conversion from ASCII to the database char format.
     * 
     * <P><B>Note:</B> This stream object can either be a standard
     * Java stream object or your own subclass that implements the
     * standard interface.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the Java input stream that contains the ASCII parameter value
     * @param length the number of bytes in the stream 
     * @exception SQLException if a database access error occurs
     */
    public void setAsciiStream(int index, java.io.InputStream x, int length)
	    throws SQLException {
			setNext("ascii stream");
			_target.setAsciiStream(index, x, length);
		}

    /**
	 * Sets the designated parameter to the given input stream, which will have 
	 * the specified number of bytes.
     * When a very large UNICODE value is input to a LONGVARCHAR
     * parameter, it may be more practical to send it via a
     * java.io.InputStream. JDBC will read the data from the stream
     * as needed, until it reaches end-of-file.  The JDBC driver will
     * do any necessary conversion from UNICODE to the database char format.
	 * The byte format of the Unicode stream must be Java UTF-8, as
	 * defined in the Java Virtual Machine Specification.
     * 
     * <P><B>Note:</B> This stream object can either be a standard
     * Java stream object or your own subclass that implements the
     * standard interface.
     *
     * @param index the first parameter is 1, the second is 2, ...  
     * @param x the java input stream which contains the
     * UNICODE parameter value 
     * @param length the number of bytes in the stream 
     * @exception SQLException if a database access error occurs
     * @deprecated
     */
    public void setUnicodeStream(int index, java.io.InputStream x, 
													int length) throws SQLException {
			setNext("unicode stream");
			_target.setUnicodeStream(index, x, length);
		}

    /**
	 * Sets the designated parameter to the given input stream, which will have 
	 * the specified number of bytes.
     * When a very large binary value is input to a LONGVARBINARY
     * parameter, it may be more practical to send it via a
     * java.io.InputStream. JDBC will read the data from the stream
     * as needed, until it reaches end-of-file.
     * 
     * <P><B>Note:</B> This stream object can either be a standard
     * Java stream object or your own subclass that implements the
     * standard interface.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the binary parameter value
     * @param length the number of bytes in the stream 
     * @exception SQLException if a database access error occurs
     */
    public void setBinaryStream(int index, java.io.InputStream x, 
												 int length) throws SQLException {
			setNext("binary stream");
			_target.setBinaryStream(index, x, length);
		}

    /**
	 * Clears the current parameter values immediately.
     * <P>In general, parameter values remain in force for repeated use of a
     * Statement. Setting a parameter value automatically clears its
     * previous value.  However, in some cases it is useful to immediately
     * release the resources used by the current parameter values; this can
     * be done by calling clearParameters.
     *
     * @exception SQLException if a database access error occurs
     */
	public void clearParameters() throws SQLException {
		_target.clearParameters();
	}

    //----------------------------------------------------------------------
    // Advanced features:

    /**
     * <p>Sets the value of a parameter using an object. The second
	 * argument must be an object type; for integral values, the
     * java.lang equivalent objects should be used.
     *
     * <p>The given Java object will be converted to the targetSqlType
     * before being sent to the database.
     *
     * If the object has a custom mapping (is of a class implementing SQLData),
     * the JDBC driver should call its method <code>writeSQL</code> to write it 
     * to the SQL data stream.
     * If, on the other hand, the object is of a class implementing
	 * Ref, Blob, Clob, Struct, 
     * or Array, the driver should pass it to the database as a value of the 
     * corresponding SQL type.
     *
     * <p>Note that this method may be used to pass datatabase-
     * specific abstract data types. 
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the object containing the input parameter value
     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be 
     * sent to the database. The scale argument may further qualify this type.
     * @param scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
     *          this is the number of digits after the decimal point.  For all other
     *          types, this value will be ignored.
     * @exception SQLException if a database access error occurs
     * @see Types 
     */
    public void setObject(int index, Object x, int targetSqlType, int scale)
			throws SQLException {
			setNext(x.toString());
			_target.setObject(index, x, targetSqlType, scale);
		}

   /**
	 * Sets the value of the designated parameter with the given object.
     * This method is like setObject above, except that it assumes a scale of zero.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the object containing the input parameter value
     * @param targetSqlType the SQL type (as defined in java.sql.Types) to be 
     *                      sent to the database
     * @exception SQLException if a database access error occurs
     */
    public void setObject(int index, Object x, int targetSqlType) 
      throws SQLException {
			setNext(x.toString());
			_target.setObject(index, x, targetSqlType);
		}

    /**
     * <p>Sets the value of a parameter using an object; use the
     * java.lang equivalent objects for integral values.
     *
     * <p>The JDBC specification specifies a standard mapping from
     * Java Object types to SQL types.  The given argument java object
     * will be converted to the corresponding SQL type before being
     * sent to the database.
     *
     * <p>Note that this method may be used to pass datatabase-
     * specific abstract data types, by using a Driver-specific Java
     * type.
     *
     * If the object is of a class implementing SQLData,
     * the JDBC driver should call its method <code>writeSQL</code> to write it 
     * to the SQL data stream.
     * If, on the other hand, the object is of a class implementing
	 * Ref, Blob, Clob, Struct, 
     * or Array, then the driver should pass it to the database as a value of the 
     * corresponding SQL type.
     *
     * This method throws an exception if there is an ambiguity, for example, if the
     * object is of a class implementing more than one of those interfaces.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the object containing the input parameter value 
     * @exception SQLException if a database access error occurs
     */
	public void setObject(int index, Object x) throws SQLException {
			setNext(x.toString());
			_target.setObject(index, x);
	}

    /**
	 * Executes any kind of SQL statement.
     * Some prepared statements return multiple results; the execute
     * method handles these complex statements as well as the simpler
     * form of statements handled by executeQuery and executeUpdate.
     *
     * @exception SQLException if a database access error occurs
     * @see Statement#execute
     */
	public boolean execute() throws SQLException {
		_sql = StringUtil.replace(_sql,";",":");
		_classLog.log(Level.FINE,_sql);
		return _target.execute();
	}

    //--------------------------JDBC 2.0-----------------------------

    /**
     * JDBC 2.0
     *
     * Adds a set of parameters to the batch.
     * 
     * @exception SQLException if a database access error occurs
     * @see Statement#addBatch
     */
	public void addBatch() throws SQLException {
		_target.addBatch();
	}

    /**
     * JDBC 2.0
     *
	 * Sets the designated parameter to the given <code>Reader</code>
	 * object, which is the given number of characters long.
     * When a very large UNICODE value is input to a LONGVARCHAR
     * parameter, it may be more practical to send it via a
     * java.io.Reader. JDBC will read the data from the stream
     * as needed, until it reaches end-of-file.  The JDBC driver will
     * do any necessary conversion from UNICODE to the database char format.
     * 
     * <P><B>Note:</B> This stream object can either be a standard
     * Java stream object or your own subclass that implements the
     * standard interface.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the java reader which contains the UNICODE data
     * @param length the number of characters in the stream 
     * @exception SQLException if a database access error occurs
     */
    public void setCharacterStream(int index,
       			  java.io.Reader reader,
														int length) throws SQLException {
			_target.setCharacterStream(index, reader, length);
		}

    /**
     * JDBC 2.0
     *
     * Sets a REF(&lt;structured-type&gt;) parameter.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @param x an object representing data of an SQL REF Type
     * @exception SQLException if a database access error occurs
     */
	public void setRef (int i, Ref x) throws SQLException {
		_target.setRef(i,x);
	}

    /**
     * JDBC 2.0
     *
     * Sets a BLOB parameter.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @param x an object representing a BLOB
     * @exception SQLException if a database access error occurs
     */
	public void setBlob (int i, Blob x) throws SQLException {
		_target.setBlob(i,x);
	}


    /**
     * JDBC 2.0
     *
     * Sets a CLOB parameter.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @param x an object representing a CLOB
     * @exception SQLException if a database access error occurs
     */
	public void setClob (int i, Clob x) throws SQLException {
		_target.setClob(i,x);
	}

    /**
     * JDBC 2.0
     *
     * Sets an Array parameter.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @param x an object representing an SQL array
     * @exception SQLException if a database access error occurs
     */
	public void setArray (int i, Array x) throws SQLException {
		_target.setArray(i, x);
	}

    /**
     * JDBC 2.0
     *
     * Gets the number, types and properties of a ResultSet's columns.
     *
     * @return the description of a ResultSet's columns
     * @exception SQLException if a database access error occurs
     */
	public ResultSetMetaData getMetaData() throws SQLException {
		return _target.getMetaData();
	}

    /**
     * JDBC 2.0
     *
     * Sets the designated parameter to a java.sql.Date value,
	 * using the given <code>Calendar</code> object.  The driver uses
	 * the <code>Calendar</code> object to construct an SQL DATE,
	 * which the driver then sends to the database.  With a
	 * a <code>Calendar</code> object, the driver can calculate the date
	 * taking into account a custom timezone and locale.  If no
	 * <code>Calendar</code> object is specified, the driver uses the default
	 * timezone and locale.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
	 * @param cal the <code>Calendar</code> object the driver will use
	 *            to construct the date
     * @exception SQLException if a database access error occurs
     */
    public void setDate(int index, java.sql.Date x, Calendar cal)
	    throws SQLException {
			_target.setDate(index, x, cal);
		}

    /**
     * JDBC 2.0
     *
     * Sets the designated parameter to a java.sql.Time value,
	 * using the given <code>Calendar</code> object.  The driver uses
	 * the <code>Calendar</code> object to construct an SQL TIME,
	 * which the driver then sends to the database.  With a
	 * a <code>Calendar</code> object, the driver can calculate the time
	 * taking into account a custom timezone and locale.  If no
	 * <code>Calendar</code> object is specified, the driver uses the default
	 * timezone and locale.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value
	 * @param cal the <code>Calendar</code> object the driver will use
	 *            to construct the time
     * @exception SQLException if a database access error occurs
     */
    public void setTime(int index, java.sql.Time x, Calendar cal) 
	    throws SQLException {
			_target.setTime(index, x, cal);
		}

    /**
     * JDBC 2.0
     *
     * Sets the designated parameter to a java.sql.Timestamp value,
	 * using the given <code>Calendar</code> object.  The driver uses
	 * the <code>Calendar</code> object to construct an SQL TIMESTAMP,
	 * which the driver then sends to the database.  With a
	 * a <code>Calendar</code> object, the driver can calculate the timestamp
	 * taking into account a custom timezone and locale.  If no
	 * <code>Calendar</code> object is specified, the driver uses the default
	 * timezone and locale.
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param x the parameter value 
	 * @param cal the <code>Calendar</code> object the driver will use
	 *            to construct the timestamp
     * @exception SQLException if a database access error occurs
     */
    public void setTimestamp(int index, java.sql.Timestamp x, Calendar cal)
	    throws SQLException {
			_target.setTimestamp(index, x, cal);
		}

    /**
     * JDBC 2.0
     *
     * Sets the designated parameter to SQL NULL.  This version of setNull should
     * be used for user-named types and REF type parameters.  Examples
     * of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and 
     * named array types.
     *
     * <P><B>Note:</B> To be portable, applications must give the
     * SQL type code and the fully-qualified SQL type name when specifying
     * a NULL user-defined or REF parameter.  In the case of a user-named type 
     * the name is the type name of the parameter itself.  For a REF 
     * parameter the name is the type name of the referenced type.  If 
     * a JDBC driver does not need the type code or type name information, 
     * it may ignore it.     
     *
     * Although it is intended for user-named and Ref parameters,
     * this method may be used to set a null parameter of any JDBC type.
     * If the parameter does not have a user-named or REF type, the given
     * typeName is ignored.
     *
     *
     * @param index the first parameter is 1, the second is 2, ...
     * @param sqlType a value from java.sql.Types
     * @param typeName the fully-qualified name of an SQL user-named type,
     *  ignored if the parameter is not a user-named type or REF 
     * @exception SQLException if a database access error occurs
     */
  public void setNull (int index, int sqlType, String typeName) 
    throws SQLException {
		_target.setNull(index, sqlType, typeName);
	}

    /**
     * Executes a SQL statement that returns a single ResultSet.
     *
     * @param sql typically this is a static SQL SELECT statement
     * @return a ResultSet that contains the data produced by the
     * query; never null 
     * @exception SQLException if a database access error occurs
     */
	public ResultSet executeQuery(String sql) throws SQLException {
		_classLog.log(Level.FINE,sql);
		return _target.executeQuery(sql);
	}

    /**
     * Executes an SQL INSERT, UPDATE or DELETE statement. In addition,
     * SQL statements that return nothing, such as SQL DDL statements,
     * can be executed.
     *
     * @param sql a SQL INSERT, UPDATE or DELETE statement or a SQL
     * statement that returns nothing
     * @return either the row count for INSERT, UPDATE or DELETE or 0
     * for SQL statements that return nothing
     * @exception SQLException if a database access error occurs
     */
	public int executeUpdate(String sql) throws SQLException {
		_classLog.log(Level.FINE,sql);
		return _target.executeUpdate(sql);
	}

    /**
	 * Releases this <code>Statement</code> object's database 
	 * and JDBC resources immediately instead of waiting for
	 * this to happen when it is automatically closed.
     * It is generally good practice to release resources as soon as
	 * you are finished with them to avoid tying up database
	 * resources.
     * <P><B>Note:</B> A Statement is automatically closed when it is
     * garbage collected. When a Statement is closed, its current
     * ResultSet, if one exists, is also closed.  
     *
     * @exception SQLException if a database access error occurs
     */
	public void close() throws SQLException {
		_target.close();
	}

    //----------------------------------------------------------------------

    /**
     * Returns the maximum number of bytes allowed
     * for any column value. 
	 * This limit is the maximum number of bytes that can be
	 * returned for any column value.
	 * The limit applies only to BINARY,
     * VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR
     * columns.  If the limit is exceeded, the excess data is silently
     * discarded.
     *
     * @return the current max column size limit; zero means unlimited 
     * @exception SQLException if a database access error occurs
     */
	public int getMaxFieldSize() throws SQLException {
		return _target.getMaxFieldSize();
	}
    
    /**
	 * Sets the limit for the maximum number of bytes in a column to
	 * the given number of bytes.  This is the maximum number of bytes 
	 * that can be returned for any column value.  This limit applies
	 * only to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and
     * LONGVARCHAR fields.  If the limit is exceeded, the excess data
     * is silently discarded. For maximum portability, use values
     * greater than 256.
     *
     * @param max the new max column size limit; zero means unlimited 
     * @exception SQLException if a database access error occurs
     */
	public void setMaxFieldSize(int max) throws SQLException {
		_target.setMaxFieldSize(max);
	}

    /**
     * Retrieves the maximum number of rows that a
     * ResultSet can contain.  If the limit is exceeded, the excess
     * rows are silently dropped.
     *
     * @return the current max row limit; zero means unlimited
     * @exception SQLException if a database access error occurs
     */
	public int getMaxRows() throws SQLException {
		return _target.getMaxRows();
	}

    /**
     * Sets the limit for the maximum number of rows that any
     * ResultSet can contain to the given number.
	 * If the limit is exceeded, the excess
     * rows are silently dropped.
     *
     * @param max the new max rows limit; zero means unlimited 
     * @exception SQLException if a database access error occurs
     */
	public void setMaxRows(int max) throws SQLException {
	  _target.setMaxRows(max);
	}

    /**
	 * Sets escape processing on or off.
     * If escape scanning is on (the default), the driver will do
     * escape substitution before sending the SQL to the database.
     *
     * Note: Since prepared statements have usually been parsed prior
     * to making this call, disabling escape processing for prepared
     * statements will have no effect.
     *
     * @param enable true to enable; false to disable
     * @exception SQLException if a database access error occurs
     */
	public void setEscapeProcessing(boolean enable) throws SQLException {
		_target.setEscapeProcessing(enable);
	}

    /**
	 * Retrieves the number of seconds the driver will
     * wait for a Statement to execute. If the limit is exceeded, a
     * SQLException is thrown.
     *
     * @return the current query timeout limit in seconds; zero means unlimited 
     * @exception SQLException if a database access error occurs
     */
	public int getQueryTimeout() throws SQLException {
		return _target.getQueryTimeout();
	}

    /**
     * Sets the number of seconds the driver will
     * wait for a Statement to execute to the given number of seconds.
	 * If the limit is exceeded, a SQLException is thrown.
     *
     * @param seconds the new query timeout limit in seconds; zero means 
     * unlimited 
     * @exception SQLException if a database access error occurs
     */
	public void setQueryTimeout(int seconds) throws SQLException {
		_target.setQueryTimeout(seconds);
	}

    /**
	 * Cancels this <code>Statement</code> object if both the DBMS and
	 * driver support aborting an SQL statement.
     * This method can be used by one thread to cancel a statement that
     * is being executed by another thread.
     *
     * @exception SQLException if a database access error occurs
     */
	public void cancel() throws SQLException {
		_target.cancel();
	}

    /**
     * Retrieves the first warning reported by calls on this Statement.
     * Subsequent Statement warnings will be chained to this
     * SQLWarning.
     *
     * <p>The warning chain is automatically cleared each time
     * a statement is (re)executed.
     *
     * <P><B>Note:</B> If you are processing a ResultSet, any
     * warnings associated with ResultSet reads will be chained on the
     * ResultSet object.
     *
     * @return the first SQLWarning or null 
     * @exception SQLException if a database access error occurs
     */
	public SQLWarning getWarnings() throws SQLException {
		return _target.getWarnings();
	}

    /**
	 * Clears all the warnings reported on this <code>Statement</code>
	 * object. After a call to this method,
	 * the method <code>getWarnings</code> will return 
	 * null until a new warning is reported for this Statement.  
     *
     * @exception SQLException if a database access error occurs
     */
	public void clearWarnings() throws SQLException {
		_target.clearWarnings();
	}

    /**
     * Defines the SQL cursor name that will be used by
     * subsequent Statement <code>execute</code> methods. This name can then be
     * used in SQL positioned update/delete statements to identify the
     * current row in the ResultSet generated by this statement.  If
     * the database doesn't support positioned update/delete, this
     * method is a noop.  To insure that a cursor has the proper isolation
     * level to support updates, the cursor's SELECT statement should be
     * of the form 'select for update ...'. If the 'for update' phrase is 
     * omitted, positioned updates may fail.
     *
     * <P><B>Note:</B> By definition, positioned update/delete
     * execution must be done by a different Statement than the one
     * which generated the ResultSet being used for positioning. Also,
     * cursor names must be unique within a connection.
     *
     * @param name the new cursor name, which must be unique within
	 *             a connection
     * @exception SQLException if a database access error occurs
     */
	public void setCursorName(String name) throws SQLException {
		_target.setCursorName(name);
	}
	
    //----------------------- Multiple Results --------------------------

    /**
     * Executes a SQL statement that may return multiple results.
     * Under some (uncommon) situations a single SQL statement may return
     * multiple result sets and/or update counts.  Normally you can ignore
     * this unless you are (1) executing a stored procedure that you know may
     * return multiple results or (2) you are dynamically executing an
     * unknown SQL string.  The  methods <code>execute</code>,
	 * <code>getMoreResults</code>, <code>getResultSet</code>,
     * and <code>getUpdateCount</code> let you navigate through multiple results.
     *
     * The <code>execute</code> method executes a SQL statement and indicates the
     * form of the first result.  You can then use getResultSet or
     * getUpdateCount to retrieve the result, and getMoreResults to
     * move to any subsequent result(s).
     *
     * @param sql any SQL statement
     * @return true if the next result is a ResultSet; false if it is
     * an update count or there are no more results
     * @exception SQLException if a database access error occurs
     * @see #getResultSet
     * @see #getUpdateCount
     * @see #getMoreResults 
     */
	public boolean execute(String sql) throws SQLException {
		return _target.execute(sql);
	}	
    /**
     *  Returns the current result as a <code>ResultSet</code> object. 
     *  This method should be called only once per result.
     *
     * @return the current result as a ResultSet; null if the result
     * is an update count or there are no more results
     * @exception SQLException if a database access error occurs
     * @see #execute 
     */
	public ResultSet getResultSet() throws SQLException {
		return _target.getResultSet();
	}

    /**
     *  Returns the current result as an update count;
     *  if the result is a ResultSet or there are no more results, -1
     *  is returned. 
     *  This method should be called only once per result.
     * 
     * @return the current result as an update count; -1 if it is a
     * ResultSet or there are no more results
     * @exception SQLException if a database access error occurs
     * @see #execute 
     */
	public int getUpdateCount() throws SQLException {
		return _target.getUpdateCount();
	}

    /**
     * Moves to a Statement's next result.  It returns true if 
     * this result is a ResultSet.  This method also implicitly
     * closes any current ResultSet obtained with getResultSet.
     *
     * There are no more results when (!getMoreResults() &&
     * (getUpdateCount() == -1)
     *
     * @return true if the next result is a ResultSet; false if it is
     * an update count or there are no more results
     * @exception SQLException if a database access error occurs
     * @see #execute 
     */
	public boolean getMoreResults() throws SQLException {
		return _target.getMoreResults();
	}


    //--------------------------JDBC 2.0-----------------------------


    /**
     * JDBC 2.0
     *
     * Gives the driver a hint as to the direction in which
	 * the rows in a result set
     * will be processed. The hint applies only to result sets created 
     * using this Statement object.  The default value is 
     * ResultSet.FETCH_FORWARD.
     * <p>Note that this method sets the default fetch direction for 
	 * result sets generated by this <code>Statement</code> object.
	 * Each result set has its own methods for getting and setting
	 * its own fetch direction.
     * @param direction the initial direction for processing rows
     * @exception SQLException if a database access error occurs
	 * or the given direction
     * is not one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or
     * ResultSet.FETCH_UNKNOWN
     */
	public void setFetchDirection(int direction) throws SQLException {
		_target.setFetchDirection(direction);
	}

    /**
     * JDBC 2.0
     *
     * Retrieves the direction for fetching rows from
	 * database tables that is the default for result sets
	 * generated from this <code>Statement</code> object.
	 * If this <code>Statement</code> object has not set
	 * a fetch direction by calling the method <code>setFetchDirection</code>,
	 * the return value is implementation-specific.
     *
     * @return the default fetch direction for result sets generated
	 *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs
     */
	public int getFetchDirection() throws SQLException {
		return _target.getFetchDirection();
	}

    /**
     * JDBC 2.0
     *
     * Gives the JDBC driver a hint as to the number of rows that should 
     * be fetched from the database when more rows are needed.  The number 
     * of rows specified affects only result sets created using this 
     * statement. If the value specified is zero, then the hint is ignored.
     * The default value is zero.
     *
     * @param rows the number of rows to fetch
     * @exception SQLException if a database access error occurs, or the
     * condition 0 <= rows <= this.getMaxRows() is not satisfied.
     */
	public void setFetchSize(int rows) throws SQLException {
		_target.setFetchSize(rows);
	}
  
    /**
     * JDBC 2.0
     *
     * Retrieves the number of result set rows that is the default 
	 * fetch size for result sets
	 * generated from this <code>Statement</code> object.
	 * If this <code>Statement</code> object has not set
	 * a fetch size by calling the method <code>setFetchSize</code>,
	 * the return value is implementation-specific.
     * @return the default fetch size for result sets generated
	 *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs
     */
	public int getFetchSize() throws SQLException {
		return _target.getFetchSize();
	}

    /**
     * JDBC 2.0
     *
     * Retrieves the result set concurrency.
     */
	public int getResultSetConcurrency() throws SQLException {
		return _target.getResultSetConcurrency();
	}

    /**
     * JDBC 2.0
     *
     * Determine the result set type.
     */
	public int getResultSetType()  throws SQLException {
		return _target.getResultSetType();
	}

    /**
     * JDBC 2.0
     *
     * Adds a SQL command to the current batch of commmands for the statement.
     * This method is optional.
     *
     * @param sql typically this is a static SQL INSERT or UPDATE statement
     * @exception SQLException if a database access error occurs, or the
     * driver does not support batch statements
     */
	public void addBatch(String sql) throws SQLException {
		_target.addBatch(sql);
	}

    /**
     * JDBC 2.0
     *
     * Makes the set of commands in the current batch empty.
     * This method is optional.
     *
     * @exception SQLException if a database access error occurs or the
     * driver does not support batch statements
     */
	public void clearBatch() throws SQLException {
		_target.clearBatch();
	}

    /**
     * JDBC 2.0
     * 
     * Submits a batch of commands to the database for execution.
     * This method is optional.
     *
     * @return an array of update counts containing one element for each
     * command in the batch.  The array is ordered according 
     * to the order in which commands were inserted into the batch.
     * @exception SQLException if a database access error occurs or the
     * driver does not support batch statements
     */
	public int[] executeBatch() throws SQLException {
		return _target.executeBatch();
	}

    /**
     * JDBC 2.0
     * 
     * Returns the <code>Connection</code> object
	 * that produced this <code>Statement</code> object.
	 * @return the connection that produced this statement
     * @exception SQLException if a database access error occurs
     */
	public Connection getConnection()  throws SQLException {
		return _target.getConnection();
	}
	public String toString() {
		return new StringBuffer(getClass().getName())
			.append(":")
			.append(_sql)
			.toString();
	}

	private String getBindVariableString(){
		int start = _sql.indexOf(":");
		int end = start;
		int len = _sql.length();

		while ((end < len) && (_sql.charAt(end) != ' ')) {
	    end++;
		}
		return  _sql.substring(start, end);
	}
	/* JDK 1.4 */
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return _target.getParameterMetaData();
	}
	public void setURL(int parameterIndex, URL x) throws SQLException {
		_target.setURL(parameterIndex, x);
	}

	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return _target.execute(sql, columnNames);
	}
	public int getResultSetHoldability() throws SQLException {
		return _target.getResultSetHoldability();
	}
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return _target.execute(sql, autoGeneratedKeys);
	}
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return _target.execute(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return _target.executeUpdate(sql, columnNames);
	}
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return _target.executeUpdate(sql, columnIndexes);
	}
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return _target.executeUpdate(sql, autoGeneratedKeys);
	}
	public ResultSet getGeneratedKeys() throws SQLException {
		return _target.getGeneratedKeys();
	}
	public boolean getMoreResults(int current) throws SQLException {
		return _target.getMoreResults(current);
	}
	/* END jdk1.4 */
	public void setAsciiStream(int parameterIndex, InputStream x)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setAsciiStream(int parameterIndex, InputStream x, long length)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setBinaryStream(int parameterIndex, InputStream x)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setBinaryStream(int parameterIndex, InputStream x, long length)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setBlob(int parameterIndex, InputStream inputStream)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setBlob(int parameterIndex, InputStream inputStream, long length)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setCharacterStream(int parameterIndex, Reader reader)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setCharacterStream(int parameterIndex, Reader reader,
			long length) throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setClob(int parameterIndex, Reader reader, long length)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setNCharacterStream(int parameterIndex, Reader value)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}
	public void setNCharacterStream(int parameterIndex, Reader value,
			long length) throws SQLException {
	}
  public void setNClob(int arg0, NClob arg1) throws SQLException {
  }
  public void setNClob(int arg0, Reader arg1) throws SQLException {
  }
  public void setNClob(int arg0, Reader arg1, long arg2) throws SQLException {
  }
  public void setNString(int arg0, String arg1) throws SQLException {
  }
  public void setRowId(int arg0, RowId arg1) throws SQLException {
  }
  public void setSQLXML(int arg0, SQLXML arg1) throws SQLException {
  }
  public boolean isClosed() throws SQLException {
    return false;
  }
  public boolean isPoolable() throws SQLException {
    return false;
  }
  public void setPoolable(boolean arg0) throws SQLException {
  }
  public boolean isWrapperFor(Class<?> arg0) throws SQLException {
    return false;
  }
  public <T> T unwrap(Class<T> arg0) throws SQLException {
    return null;
  }
}
